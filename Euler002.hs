-- Each new term in the Fibonacci sequence is generated by adding the
-- previous two terms. By starting with 1 and 2, the first 10 terms
-- will be:

-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

-- By considering the terms in the Fibonacci sequence whose values do
-- not exceed four million, find the sum of the even-valued terms.

module Euler where

-- direct version

fibs = 1 : 2 : zipWith (+) fibs (tail fibs)

sumFibs :: Integer -> Int -> Integer
sumFibs acc item = sumFibsHelper curr                   
  where curr = fibs !! item
        sumFibsHelper x
          | x > 4000000 = acc
          | odd x = sumFibs acc (item + 1)
          | even x = sumFibs (acc + x) (item + 1)
result002 = sumFibs 0 0

-- advanced version

evenFibs = 2 : 8 : zipWith (+) evenFibs (map (*4) $ tail evenFibs)

sumEvenFibs :: Integer -> Int -> Integer
sumEvenFibs acc item = sumEvenFibsHelper curr
  where curr = evenFibs !! item
        sumEvenFibsHelper x
          | curr > 4000000 = acc
          | otherwise = sumEvenFibs (acc + x) (item + 1)

result002' = sumEvenFibs 0 0
